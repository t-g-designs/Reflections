What happens when you initialise a repository? Why do you need to do it?

It creates an empty repository in the directorty you are in and creates a .git file. You can then commit to the repository so you can keep track of your changes easily.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a temporary place that git keeps files before committing them. It lets you decide which files you want to commit and gives you an opportunity to see which files and change your mind before committing them.

How can you use the staging area to make sure you have one commit per logical change?

The staging area lets you add files temporarily so you can add the files you have changed and then commit them making sure that they all represent one logical change per commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Bracnhes are helpful if you want to try a new feature but want to keep a working original. Also if you want to creat different versions of the files. That way you can keep them separate and know whats happening.

How do the diagrams help you visualize the branch structure?

They let you see at which commit the branch is created and how it relates to other commits and branches within the repository.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging 2 branches allows the edits made in one branch to merge with the other branch (usually the master branch). This allows all previous commits to still be available from both branches. 

What are the pros and cons of Git's automatic merging vs always doing merges manually?

The pros are that it is quicker and more efficient most of the time than manual. However, sometimes the conflicts that arise would be quicker resolved manually as people understand the meaning of the code.
